@page "/employees"
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject IEmployeeService employeeService
@attribute [AuthorizeRoles(Role.Administrator)]

<h1>Pracownicy</h1>
<button type="button" class="btn btn-primary" @onclick="() => AddNewEmployee()">Dodaj nowego pracownika</button>

@if (employees == null)
{
    <div class="spinner"></div>
}
else
{
    @if (employees.Any())
    {
        <table class="table  table-striped table-bordered" style="text-align:center; margin-top: 16px;">
            <thead>
                <tr>
                    <th>Imię</th>
                    <th>Nazwisko</th>
                    <th>Nazwa użytkownika</th>
                    <th>Hasło</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>

                @foreach (var employee in employees)
                {
                    <tr>
                        <td>@employee.FirstName</td>
                        <td>@employee.LastName</td>
                        <td>@employee.Username</td>
                        <td>@employee.Password</td>
                        <td>
                            <button type="button" class="btn btn-warning" @onclick="() => EditEmployee(employee)">Edytuj</button>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteEmployee(employee)">Usuń</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div style="padding-top: 25px">
            <h2>Nie ma jeszcze żadnych pracowników</h2>
        </div>
    }

}

@code {

    public Guid EmployeeId { get; set; }
    private IEnumerable<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        employees = await employeeService.GetAllAsync();
    }

    void AddNewEmployee() => navigationManager.NavigateTo("/addEmployee");

    void EditEmployee(Employee employee)
    {
        navigationManager.NavigateTo($"/editEmployee/{employee.Id}");
    }

    public async Task DeleteEmployee(Employee employee)
    {
        employeeService.Delete(employee);
        await employeeService.SaveChangesAsync();
        navigationManager.NavigateTo("/employees", forceLoad: true);
    }

}