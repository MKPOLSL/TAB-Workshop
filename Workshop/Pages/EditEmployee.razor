@page "/editEmployee/{EmployeeId:guid}"
@inject IEmployeeService employeeService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@attribute [AuthorizeRoles(Role.Administrator)]

<h1>
    Edytuj pracownika
</h1>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="@employee" OnValidSubmit="@DoEditEmployee">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Name" class="control-label">Imię</label>
                <input for="Name" class="form-control" @bind-value="@employee.FirstName" />
            </div>
            <div class="form-group">
                <label for="Name" class="control-label">Nazwisko</label>
                <input for="Name" class="form-control" @bind-value="@employee.LastName" />
            </div>
            <div class="form-group">
                <label for="Name" class="control-label">Nazwa użytkownika</label>
                <input for="Name" class="form-control" @bind-value="@employee.Username" />
            </div>
            <div class="form-group">
                <label for="Name" class="control-label">Hasło</label>
                <input for="Name" class="form-control" @bind-value="@employee.Password" />
            </div>
            <div class="form-group">
                <label for="Role" class="control-label">Rola</label>
                <select for="Role" class="form-control" @bind="employee.Role">
                    @foreach (Role role in Enum.GetValues(typeof(Role)))
                    {
                        <option value="@role">@role.GetDisplayName()</option>
                    }
                </select>
            </div>
            <div class="form-group">
                <button type="submit" class="btn btn-primary">Zapisz</button>
                <button type="button" class="btn btn-danger" @onclick="() => Cancel()">Anuluj</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public Guid EmployeeId { get; set; }
    Employee employee = new Employee();

    protected override async Task OnParametersSetAsync()
    {
        employee = await employeeService.GetById(EmployeeId);
    }

    protected async Task DoEditEmployee()
    {
        employeeService.Update(employee);
        await employeeService.SaveChangesAsync();
        navigationManager.NavigateTo("/employees");
    }

    void Cancel() => navigationManager.NavigateTo("/employees");
}