@page "/cars"
@inject ICarService carService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmployeeService employeeService
@attribute [AuthorizeRoles(Role.Manager)]

<h1>Samochody</h1>

@if (cars == null)
{
    <div class="spinner"></div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Numer Rejestracyjny</th>
                <th>Marka</th>
                <th>Model</th>
                <th>Klient</th>
                <th>Akcje</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.RegistrationNumber</td>
                    <td>@car.Brand</td>
                    <td>@car.Model</td>
                    <td>@(car.Client != null ? car.Client?.FirstName + " " + car.Client?.LastName : "brak")</td>
                    <td>
                        <button type="button" class="btn btn-warning" @onclick="() => EditCar(car)">Edytuj</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteCar(car)">Usuń</button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => AddRequest(car)">Dodaj zgłoszenie</button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => AddCar(car)">Przypisz</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Car> cars;

    protected override async Task OnInitializedAsync()
    {
        cars = await carService.GetAllCarsWithClients();
        await base.OnInitializedAsync();

    }

    void EditCar(Car car)
    {
        navigationManager.NavigateTo($"/editCar/{car.Id}");
    }

    public async Task DeleteCar(Car car)
    {
        //await carService.DeleteCar(car);
        navigationManager.NavigateTo("/cars", forceLoad: true);
    }

    void AddCar(Car car)
    {
        navigationManager.NavigateTo($"/addCar/{car.Client.Id}");
    }

    private async Task AddRequest(Car car)
    {
        AuthenticationState temp = await
        ((CustomAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        String username = temp.User.Identity.Name;
        Employee currentManager = await employeeService.GetByUsername(username);
        navigationManager.NavigateTo($"/AddRequest/{car.Id}/{currentManager.Id}");
    }


}
