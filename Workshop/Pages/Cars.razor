@page "/cars"
@inject ICarService carService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@attribute [AuthorizeRoles(Role.Manager)]

<h1>Samochody</h1>

<table class="table">
    <thead>
        <tr>
            <th>Marka</th>
            <th>Model</th>
            <th>Rok produkcji</th>
            <th>Numer rejestracyjny</th>
            <th>Typ</th>
            <th>Akcje</th>
            <th>
                <button type="button" class="btn btn-primary" @onclick="() => AddNewCar()">Dodaj nowe auto</button>
            </th>
        </tr>
    </thead>
    <tbody>
        @if (cars == null)
        {
            <p><em>Ładuję...</em></p>
        }
        else
        {
            @foreach (var car in cars)
            {
                <tr>
                    <td>@car.Brand</td>
                    <td>@car.Model</td>
                    <td>@car.ProductionYear</td>
                    <td>@car.RegistrationNumber</td>
                    <td>Jakiś_tam_typ</td>
                    <td>
                        <button type="button" class="btn btn-warning" @onclick="() => EditCar()">Edytuj</button>
                        <button type="button" class="btn btn-danger" @onclick="() => DeleteCar(car)">Usuń</button>
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => AddCar()">Przypisz</button>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private IEnumerable<Car> cars;

    protected override async Task OnInitializedAsync()
    {
        cars = await carService.GetAllCars();
    }

    void AddNewCar() => navigationManager.NavigateTo("/addCar");

    void EditCar()
    {

    }

    public async Task DeleteCar(Car car)
    {
        //await carService.DeleteCar(car);
        navigationManager.NavigateTo("/cars", forceLoad: true);
    }

    void AddCar()
    {
        navigationManager.NavigateTo("/");
    }
}