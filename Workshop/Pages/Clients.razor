@page "/clients"
@inject IClientService clientService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@attribute [AuthorizeRoles(Role.Manager)]

<h1>Klienci</h1>

@if (clients == null)
{
    <div class="spinner"></div>
}
else
{
    <button type="button" class="btn btn-primary" @onclick="() => AddNewClient()">Dodaj nowego klienta</button>
    @if (clients.Any())
    {
        <table class="table  table-striped table-bordered" style="text-align:center; margin-top: 16px;">
            <thead>
                <tr>
                    <th>Imię</th>
                    <th>Nazwisko</th>
                    <th>Numer telefonu</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var client in clients)
                {
                    <tr>
                        <td>@client.FirstName</td>
                        <td>@client.LastName</td>
                        <td>@client.PhoneNumber</td>
                        <td>
                            <button type="button" class="btn btn-warning" @onclick="() => EditClient(client)">Edytuj</button>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteClient(client)">Usuń</button>
                            <button type="button" class="btn btn-primary" @onclick="() => AddCar(client)">Przypisz samochód</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div style="padding-top: 25px">
            <h2>Nie ma jeszcze żadnych klientów</h2>
        </div>
    }
}

@code {
    public Guid ClientId { get; set; }
    private IEnumerable<Client> clients;

    protected override async Task OnInitializedAsync()
    {
        clients = await clientService.GetAllAsync();
    }

    void AddNewClient() => navigationManager.NavigateTo("/addClient");

    void EditClient(Client client)
    {
        navigationManager.NavigateTo($"/editClient/{client.Id}");
    }

    public async Task DeleteClient(Client client)
    {
        clientService.Delete(client);
        await clientService.SaveChangesAsync();
        navigationManager.NavigateTo("/clients", forceLoad: true);
    }

    void AddCar(Client client)
    {
        navigationManager.NavigateTo($"/addCar/{client.Id}");
    }
}