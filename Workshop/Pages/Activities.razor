@page "/activities/{RequestId:guid}"

@using System.Threading.Tasks
@inject IActivityService activityService
@inject IRequestService requestService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h1>Realizuj Aktywności</h1>

<table id="activityTable" class="table table-striped table-bordered" style="text-align:center;">
    <thead>
        <tr>
            <th>Typ</th>
            <th>Opis</th>
            <th>Wynik</th>
            <th>Status</th>
            <th>Data rejestracji aktywności</th>
            <th>Data zakończenia aktywności</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var activity in activities)
        {
            <tr>
                <td>@activity.ActivityType</td>
                <td>@activity.Description</td>
                <td>@activity.Result</td>
                <td>@activity.Status</td>
                <td>@activity.Registered</td>
                <td>@activity.FinishedOrCancelled</td>
                <td>
                    <button type="button" class="btn btn-warning" @onclick="() => RealizeActivity(activity)">Wykonaj</button>
                    <button type="button" class="btn btn-danger" @onclick="() => EndActivity(activity)">Zakończ</button>
                </td>
            </tr>
        }
    </tbody>
</table>


@code {
    [Parameter]
    public Guid RequestId { get; set; }
    private Request request = new Request();
    private IEnumerable<Activity> activities = new List<Activity>() { new Activity() };

    protected override async Task OnInitializedAsync()
    {
        request = await requestService.GetRequest(RequestId);
        //activities = request.Activities;
        //new List<Activity> { new Activity() }; // activityService.GetAllActivities().ToList();
        await base.OnInitializedAsync();
    }

    protected void RealizeActivity(Activity activity)
    {
        navigationManager.NavigateTo($"/editActivity/{activity.Id}/{RequestId}");

    }
    protected void EndActivity(Activity activity)
    {

    }
}
