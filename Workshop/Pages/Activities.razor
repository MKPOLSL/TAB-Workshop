@page "/activities"
@page "/activities/{RequestId:guid}"

@using System.Threading.Tasks
@inject IActivityService activityService
@inject IEmployeeService employeeService
@inject IRequestService requestService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@attribute [AuthorizeRoles(Role.Worker, Role.Manager)]

<h1>Realizuj Czynność</h1>
@if (activities == null)
{
    <div class="spinner"></div> }
else
{
    @if (activities.Any())
    {
        <table id="activityTable" class="table table-striped table-bordered" style="text-align:center;">
            <thead>
                <tr>
                    <th>Pojazd</th>
                    <th>Nr rej.</th>
                    <th>Typ</th>
                    <th>Opis</th>
                    <th>Wynik</th>
                    <th>Status</th>
                    <th>Data rejestracji</th>
                    <th>Data zakończenia</th>
                    @if (employee.Role == Role.Manager)
                    { 
                        <th>Pracownik</th> 
                    }
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in activities)
                {
                <tr>
                    <td>@activity.Request.Car.Brand @activity.Request.Car.Model</td>
                    <td>@activity.Request.Car.RegistrationNumber</td>
                    <td>@activity.ActivityType.ActivityName</td>
                    <td>@activity.Description</td>
                    <td>@(string.IsNullOrWhiteSpace(activity.Result) ? " - " : activity.Result)</td>
                    <td><span class="badge badge-@Badges.GetBadge(activity.Status)">@activity.Status.GetDisplayName()</span></td>
                    <td>@activity.Registered</td>
                    <td>@(activity.FinishedOrCancelled == DateTime.MinValue ? " - " : activity.FinishedOrCancelled.ToString())</td>
                    @if (employee.Role == Role.Manager) 
                    { 
                        <td>@(activity.Worker != null ? activity.Worker.FirstName + " " + activity.Worker.LastName + " (" + activity.Worker.Username + ")" : "Brak")</td>
                    }
                    <td style="min-width: 300px">
                        @if (employee.Role == Role.Worker)
                        {
                            <button type="button" class="btn btn-success" @onclick="() => RestoreActivity(activity)">Realizuj</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-success" @onclick="() => AssignActivity(activity)">Przypisz</button>
                        }
                        <button type="button" class="btn btn-warning" @onclick="() => ShowModal(activity, true)">Zakończ</button>
                        <button type="button" class="btn btn-danger" @onclick="() => ShowModal(activity, false)">Anuluj</button>
                    </td>
                </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div style="padding-top: 25px">
            <h2>To zlecenie nie ma żadnych aktywności</h2>

        </div>
    }
}


@code {
    [CascadingParameter] public IModalService Modal { get; set; }
    [Parameter]
    public Guid RequestId { get; set; }
    private Request request;

    private Employee employee;
    private IEnumerable<Activity> activities;

    protected override async Task OnInitializedAsync()
    {
        employee = await employeeService.GetUserFromLocalStorage();
        if(employee.Role == Role.Worker)
        {
            activities = await activityService.GetWorkerActivities(employee.Id);
            activities = activities.OrderBy(a => a.Request).ThenBy(a => a.SequenceNumber);
        }
        else if(RequestId != Guid.Empty)
        {
            request = await requestService.GetRequest(RequestId);
            activities = request.Activities;
            activities = activities.OrderBy(a => a.SequenceNumber);  
        }
        await base.OnInitializedAsync();
    }

    protected async Task RestoreActivity(Activity activity)
    {
        activity.Result = "";
        activity.FinishedOrCancelled = default;
        activity.Status = Status.InProgress;
        activity.Request.Status = Status.InProgress;
        requestService.Update(activity.Request);
        activityService.Update(activity);
        await activityService.SaveChangesAsync();
    }

    protected async Task AssignActivity(Activity activity)
    {
        var modal = Modal.Show<WorkersModal>("Wybierz pracownika");
        var result = await modal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            activity.Worker = (Employee)result.Data;
            activityService.Update(activity);
            await activityService.SaveChangesAsync();
        }
    }

    protected async Task ShowModal(Activity activity, bool finish)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(FinishActivity.ActivityId), activity.Id);
        parameters.Add(nameof(FinishActivity.finish), finish);

        var modal = Modal.Show<FinishActivity>("Zakończ lub anuluj czynność", parameters);
        var result = await modal.Result;

        if (result.Cancelled)
        {
            Console.WriteLine("Modal was cancelled");
        }
        else
        {
            activity = (Activity)result.Data;
        }
    }
}
