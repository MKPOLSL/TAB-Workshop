@page "/activities"

@using System.Threading.Tasks
@inject IActivityService activityService
@inject IEmployeeService employeeService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<h1>Realizuj Czynność</h1>
@if (activities == null)
{
    <div class="spinner"></div> }
else
{
    @if (activities.Any())
    {
        <table id="activityTable" class="table table-striped table-bordered" style="text-align:center;">
            <thead>
                <tr>
                    <th>Typ</th>
                    <th>Opis</th>
                    <th>Wynik</th>
                    <th>Status</th>
                    <th>Data rejestracji aktywności</th>
                    <th>Data zakończenia aktywności</th>
                    <th>Akcje</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var activity in activities)
                {
                    <tr>
                        <td>@activity.ActivityType</td>
                        <td>@activity.Description</td>
                        <td>@(activity.Result ?? "Aktywność nie jest jeszcze ukończona")</td>
                        <td>@activity.Status</td>
                        <td>@activity.Registered</td>
                        <td>@(activity.FinishedOrCancelled )</td>
                        <td>
                            <button type="button" class="btn btn-warning" @onclick="() => RealizeActivity(activity)">Wykonaj</button>
                            <button type="button" class="btn btn-danger" @onclick="() => EndActivity(activity)">Zakończ</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div style="padding-top: 25px">
            <h2>To zlecenie nie ma żadnych aktywności</h2>

        </div>
    }
}


@code {
    private Employee worker;
    private IEnumerable<Activity> activities;

    protected override async Task OnInitializedAsync()
    {
        worker = await employeeService.GetUserFromLocalStorage();
        activities = await activityService.GetWorkerActivities(worker.Id);
        await base.OnInitializedAsync();
    }

    protected void RealizeActivity(Activity activity)
    {
        navigationManager.NavigateTo($"/editActivity/{activity.Id}");

    }
    protected void EndActivity(Activity activity)
    {

    }
}
